#!/usr/bin/env python
# coding: utf-8

# #1
# #def keyword is used to create a function
# def odd_num():
#     lis=[]
#     for i in range(26):
#         if i%2!=0:
#             lis.append(i)
#     return lis
# odd_num()

# #2
# 
# # *args and **kwargs are used in Python functions when we want to pass a variable number of arguments to a function.
# 
# args is used to pass a variable-length argument list to the function. It is represented by an asterisk () followed by a parameter name. When we pass arguments to this parameter, it is packed into a tuple in the function.
# 
# Here is an example of a function that uses *args:
# def sum_numbers(*args):
#     sum = 0
#     for num in args:
#         sum += num
#     return sum
# 
# # Call the function with variable number of arguments
# print(sum_numbers(1, 2, 3))    # Output: 6
# print(sum_numbers(1, 2, 3, 4, 5))    # Output: 15
# kwargs, on the other hand, is used to pass a variable-length keyword argument dictionary to the function. It is represented by two asterisks () followed by a parameter name. When we pass arguments to this parameter, it is packed into a dictionary in the function.
# 
# def print_details(**kwargs):
#     for key, value in kwargs.items():
#         print(key, ":", value)
# 
# # Call the function with variable number of keyword arguments
# 
# print_details(name='John Doe', age=30, occupation='Engineer')
# 
# # Output: 
# # name : John Doe
# # age : 30
# # occupation : Engineer
# 

# #3
# In Python, an iterator is an object that allows a programmer to traverse through all the elements of a collection or sequence, such as a list or a string, without needing to know the specific implementation of the collection being traversed.
# 
# To initialise an iterator object in Python, we can use the built-in iter() function. To iterate through the iterator object, we can use the built-in next() function.
# 
# Here's an example of using an iterator to print the first five elements of the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]:
# my_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
# my_iterator = iter(my_list)
# 
# for i in range(5):
#     print(next(my_iterator))
# In this example, we first initialise an iterator object my_iterator using the iter() function and passing in the list my_list. We then use a for loop to iterate through the first five elements of the iterator object using the next() function and print each element to the console.

# #4
# In Python, a generator function is a special type of function that returns an iterator object which can be iterated over to get the values generated by the function. It allows us to generate a series of values on-the-fly rather than generating them all at once, which can be more memory-efficient.
# 
# The yield keyword is used in a generator function to produce a value and suspend the function's execution temporarily. When the function is called again, it resumes execution from where it left off, remembering the previous state of the function. This allows the function to produce a series of values one at a time instead of returning them all at once.
# 
# Here's an example of a generator function that yields the first n even numbers:
# def even_numbers(n):
#     count = 0
#     while count < n:
#         yield count * 2
#         count += 1
#         
#         
# even_gen = even_numbers(5)
# 
# for num in even_gen:
#     print(num)
# 

# In[5]:


#5
def prime_numbers():
    n = 2
    while True:
        for i in range(2, n):
            if n % i == 0:
                break
        else:
            yield n
        n += 1

# create a generator object
prime_gen = prime_numbers()

# print the first 20 prime numbers
for i in range(20):
    print(next(prime_gen))


# In[ ]:




